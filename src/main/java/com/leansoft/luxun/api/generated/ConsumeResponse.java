/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.leansoft.luxun.api.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-24")
public class ConsumeResponse implements org.apache.thrift.TBase<ConsumeResponse, ConsumeResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ConsumeResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConsumeResponse");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("itemList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CONSUMED_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("lastConsumedIndex", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConsumeResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConsumeResponseTupleSchemeFactory());
  }

  private Result result; // required
  private List<ByteBuffer> itemList; // required
  private long lastConsumedIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT((short)1, "result"),
    ITEM_LIST((short)2, "itemList"),
    LAST_CONSUMED_INDEX((short)3, "lastConsumedIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 2: // ITEM_LIST
          return ITEM_LIST;
        case 3: // LAST_CONSUMED_INDEX
          return LAST_CONSUMED_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTCONSUMEDINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
    tmpMap.put(_Fields.ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("itemList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.LAST_CONSUMED_INDEX, new org.apache.thrift.meta_data.FieldMetaData("lastConsumedIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConsumeResponse.class, metaDataMap);
  }

  public ConsumeResponse() {
  }

  public ConsumeResponse(
    Result result,
    List<ByteBuffer> itemList,
    long lastConsumedIndex)
  {
    this();
    this.result = result;
    this.itemList = itemList;
    this.lastConsumedIndex = lastConsumedIndex;
    setLastConsumedIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConsumeResponse(ConsumeResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResult()) {
      this.result = new Result(other.result);
    }
    if (other.isSetItemList()) {
      List<ByteBuffer> __this__itemList = new ArrayList<ByteBuffer>(other.itemList);
      this.itemList = __this__itemList;
    }
    this.lastConsumedIndex = other.lastConsumedIndex;
  }

  public ConsumeResponse deepCopy() {
    return new ConsumeResponse(this);
  }

  @Override
  public void clear() {
    this.result = null;
    this.itemList = null;
    setLastConsumedIndexIsSet(false);
    this.lastConsumedIndex = 0;
  }

  public Result getResult() {
    return this.result;
  }

  public void setResult(Result result) {
    this.result = result;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public int getItemListSize() {
    return (this.itemList == null) ? 0 : this.itemList.size();
  }

  public java.util.Iterator<ByteBuffer> getItemListIterator() {
    return (this.itemList == null) ? null : this.itemList.iterator();
  }

  public void addToItemList(ByteBuffer elem) {
    if (this.itemList == null) {
      this.itemList = new ArrayList<ByteBuffer>();
    }
    this.itemList.add(elem);
  }

  public List<ByteBuffer> getItemList() {
    return this.itemList;
  }

  public void setItemList(List<ByteBuffer> itemList) {
    this.itemList = itemList;
  }

  public void unsetItemList() {
    this.itemList = null;
  }

  /** Returns true if field itemList is set (has been assigned a value) and false otherwise */
  public boolean isSetItemList() {
    return this.itemList != null;
  }

  public void setItemListIsSet(boolean value) {
    if (!value) {
      this.itemList = null;
    }
  }

  public long getLastConsumedIndex() {
    return this.lastConsumedIndex;
  }

  public void setLastConsumedIndex(long lastConsumedIndex) {
    this.lastConsumedIndex = lastConsumedIndex;
    setLastConsumedIndexIsSet(true);
  }

  public void unsetLastConsumedIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTCONSUMEDINDEX_ISSET_ID);
  }

  /** Returns true if field lastConsumedIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetLastConsumedIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTCONSUMEDINDEX_ISSET_ID);
  }

  public void setLastConsumedIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTCONSUMEDINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Result)value);
      }
      break;

    case ITEM_LIST:
      if (value == null) {
        unsetItemList();
      } else {
        setItemList((List<ByteBuffer>)value);
      }
      break;

    case LAST_CONSUMED_INDEX:
      if (value == null) {
        unsetLastConsumedIndex();
      } else {
        setLastConsumedIndex((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();

    case ITEM_LIST:
      return getItemList();

    case LAST_CONSUMED_INDEX:
      return getLastConsumedIndex();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case ITEM_LIST:
      return isSetItemList();
    case LAST_CONSUMED_INDEX:
      return isSetLastConsumedIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConsumeResponse)
      return this.equals((ConsumeResponse)that);
    return false;
  }

  public boolean equals(ConsumeResponse that) {
    if (that == null)
      return false;

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_itemList = true && this.isSetItemList();
    boolean that_present_itemList = true && that.isSetItemList();
    if (this_present_itemList || that_present_itemList) {
      if (!(this_present_itemList && that_present_itemList))
        return false;
      if (!this.itemList.equals(that.itemList))
        return false;
    }

    boolean this_present_lastConsumedIndex = true;
    boolean that_present_lastConsumedIndex = true;
    if (this_present_lastConsumedIndex || that_present_lastConsumedIndex) {
      if (!(this_present_lastConsumedIndex && that_present_lastConsumedIndex))
        return false;
      if (this.lastConsumedIndex != that.lastConsumedIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_itemList = true && (isSetItemList());
    list.add(present_itemList);
    if (present_itemList)
      list.add(itemList);

    boolean present_lastConsumedIndex = true;
    list.add(present_lastConsumedIndex);
    if (present_lastConsumedIndex)
      list.add(lastConsumedIndex);

    return list.hashCode();
  }

  @Override
  public int compareTo(ConsumeResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemList()).compareTo(other.isSetItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemList, other.itemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastConsumedIndex()).compareTo(other.isSetLastConsumedIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastConsumedIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastConsumedIndex, other.lastConsumedIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConsumeResponse(");
    boolean first = true;

    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemList:");
    if (this.itemList == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.itemList, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastConsumedIndex:");
    sb.append(this.lastConsumedIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetResult()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'result' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (result != null) {
      result.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConsumeResponseStandardSchemeFactory implements SchemeFactory {
    public ConsumeResponseStandardScheme getScheme() {
      return new ConsumeResponseStandardScheme();
    }
  }

  private static class ConsumeResponseStandardScheme extends StandardScheme<ConsumeResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConsumeResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result = new Result();
              struct.result.read(iprot);
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.itemList = new ArrayList<ByteBuffer>(_list0.size);
                ByteBuffer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBinary();
                  struct.itemList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CONSUMED_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastConsumedIndex = iprot.readI64();
              struct.setLastConsumedIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConsumeResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        struct.result.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.itemList != null) {
        oprot.writeFieldBegin(ITEM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.itemList.size()));
          for (ByteBuffer _iter3 : struct.itemList)
          {
            oprot.writeBinary(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_CONSUMED_INDEX_FIELD_DESC);
      oprot.writeI64(struct.lastConsumedIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConsumeResponseTupleSchemeFactory implements SchemeFactory {
    public ConsumeResponseTupleScheme getScheme() {
      return new ConsumeResponseTupleScheme();
    }
  }

  private static class ConsumeResponseTupleScheme extends TupleScheme<ConsumeResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConsumeResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.result.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetItemList()) {
        optionals.set(0);
      }
      if (struct.isSetLastConsumedIndex()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetItemList()) {
        {
          oprot.writeI32(struct.itemList.size());
          for (ByteBuffer _iter4 : struct.itemList)
          {
            oprot.writeBinary(_iter4);
          }
        }
      }
      if (struct.isSetLastConsumedIndex()) {
        oprot.writeI64(struct.lastConsumedIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConsumeResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.result = new Result();
      struct.result.read(iprot);
      struct.setResultIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.itemList = new ArrayList<ByteBuffer>(_list5.size);
          ByteBuffer _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readBinary();
            struct.itemList.add(_elem6);
          }
        }
        struct.setItemListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastConsumedIndex = iprot.readI64();
        struct.setLastConsumedIndexIsSet(true);
      }
    }
  }

}

